buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath("net.serenity-bdd:serenity-gradle-plugin:2.2.9")
        classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.5.0'
    }
}

plugins {
    id 'application'
    id 'uk.gov.hmcts.java' version '0.12.0'
    id 'pmd'
    id 'jacoco'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'org.springframework.boot' version '2.3.4.RELEASE'
    id 'com.github.ben-manes.versions' version '0.28.0'
//    id 'org.sonarqube' version '2.8'
    id 'au.com.dius.pact' version '4.1.7'
    id 'com.github.spacialcircumstances.gradle-cucumber-reporting' version '0.1.22'
}

apply plugin: 'java'
apply plugin: 'net.serenity-bdd.aggregator'
apply plugin: 'project-report'
apply plugin: 'idea'
apply plugin: 'io.spring.dependency-management'


def versions = [
        junit          : '5.5.0',
        reformLogging  : '5.1.1',
        serenity       : '2.1.0',
        springBoot     : '2.3.4.RELEASE',
        rest_assured   : '3.3.0',
        cucumber       : '5.7.0',
]

mainClassName = 'uk.gov.hmcts.reform.orgrolemapping.AmRoleAssignmentEndToEnd'
def jarName = 'am-role-assignment-e2e-tests.jar'

pmd {
    toolVersion = '6.21.0'
    sourceSets = []
}

group = 'uk.gov.hmcts.reform.amroleassignmenetendtoend'
version = '0.0.1'

allprojects {
    sourceCompatibility = '11'
    targetCompatibility = '11'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.0
            }
        }
    }
}

configurations {
    functionalTestCompile.extendsFrom testCompile
    functionalTestRuntime.extendsFrom testRuntime
    cucumberRuntime.extendsFrom(functionalRuntime)
}

sourceSets {
    functionalTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/functionalTest/java')
        }
        resources.srcDir file('src/functionalTest/resources')
    }

//    integrationTest {
//        java {
//            compileClasspath += main.output + test.output
//            runtimeClasspath += main.output + test.output
//            srcDir file('src/integrationTest/java')
//        }
//        resources.srcDir file('src/integrationTest/resources')
//    }

//    smokeTest {
//        java {
//            compileClasspath += main.output + test.output
//            runtimeClasspath += main.output + test.output
//            srcDir file('src/smokeTest/java')
//        }
//        resources.srcDir file('src/smokeTest/resources')
//    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    doFirst {
        generateCucumberReports.enabled = true
        javaexec {
            main = "uk.gov.hmcts.reform.orgrolemapping.befta.OrgRoleMappingAmBeftaMain"
            classpath += configurations.cucumberRuntime + sourceSets.functionalTest.runtimeClasspath + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', "json:${projectDir}/target/cucumber.json", '--tags', 'not @Ignore', '--glue',
                    'uk.gov.hmcts.befta.player', 'src/functionalTest/resources/features/']
        }
    }
}

//task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
//    testClassesDirs = sourceSets.integrationTest.output.classesDirs
//    classpath = sourceSets.integrationTest.runtimeClasspath
//    mustRunAfter test
//    finalizedBy aggregate
//}
//check.dependsOn integration

//task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
//    testClassesDirs = sourceSets.smokeTest.output.classesDirs
//    classpath = sourceSets.smokeTest.runtimeClasspath
//    finalizedBy aggregate
//}

jacocoTestReport {
    executionData(test)
    reports {
        xml.enabled = true
        csv.enabled = false
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

jacoco {
    toolVersion = "0.8.5"
}


//sonarqube {
//    properties {
//        property "sonar.projectName", "am-role-assignment-e2e-tests"
//        property "sonar.projectKey", "am-role-assignment-e2e-tests"
//        property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
//        property "sonar.pitest.mode", "reuseReport"
//        property "sonar.pitest.reportsDirectory", "build/reports/pitest"
//        property "sonar.exclusions",
//                "src/main/java/**"
//        property "sonar.junit.reportPaths", "${project.buildDir}/test-results/junit-platform"
//    }
//}
//
//
//project.tasks['sonarqube'].group = "Verification"

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all {
            def isNonStable = { String version ->
                ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'ea'].any { qualifier ->
                    version ==~ /(?i).*[.-]$qualifier[.\d-+]*/
                }
            }
            if (isNonStable(candidate.version) && !isNonStable(currentVersion)) {
                selection.reject('Release candidate')
            }
        }
    }
}

dependencyCheck {
    suppressionFile = 'config/owasp/suppressions.xml'
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven {
        url "https://dl.bintray.com/hmcts/hmcts-maven"
    }
    maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
}


dependencies {
    compile(group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot) {
    }

    testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot) {
        }
    testCompile group: 'uk.gov.hmcts', name: 'befta-fw', version: '5.11.0-RDM-9238.2'

    testCompile(group: 'io.cucumber', name: 'cucumber-java', version: versions.cucumber) {
    }
    testCompile group: 'io.cucumber', name: 'cucumber-junit', version: versions.cucumber

//    smokeTestCompile group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
//    smokeTestCompile group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
//    smokeTestCompile group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
//    smokeTestCompile group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
//    smokeTestCompile group: 'io.rest-assured', name: 'rest-assured', version: versions.rest_assured
//    smokeTestCompile group: 'commons-io', name: 'commons-io', version: '2.8.0'
    // AM-467-Serenity report for Integration test
//    integrationTestCompile group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
//    integrationTestCompile group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
//    integrationTestCompile group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
//    integrationTestCompile group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
//    integrationTestCompile group: 'io.rest-assured', name: 'rest-assured', version: versions.rest_assured
//
//    integrationTestCompile sourceSets.main.runtimeClasspath
//    integrationTestCompile sourceSets.test.runtimeClasspath

    functionalTestCompile sourceSets.main.runtimeClasspath
    functionalTestCompile sourceSets.test.runtimeClasspath

//    smokeTestCompile sourceSets.main.runtimeClasspath
//    smokeTestCompile sourceSets.test.runtimeClasspath
//    smokeTestCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
//    smokeTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok


}


project.ext {

}

def getCheckedOutGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}

test {
    generateCucumberReports.enabled = false
    useJUnitPlatform()
    failFast = true
}


bootJar {
    archiveName = jarName

    manifest {
        attributes('Implementation-Version': project.version.toString())
    }
}

configurations {
    runtime.exclude group: "com.thoughtworks.xstream", module: "xstream"
}

cucumberReports {
    outputDir = file("${projectDir}/target/cucumber")
    reports = files("${projectDir}/target/cucumber.json")
    notFailingStatuses = ["skipped","passed"]
}
